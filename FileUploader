// src/components/FileUploader.js
import React, { useCallback } from 'react';

type SupportExportFormats = {
  format: string;
  data: any[];
};

interface Props {
  onImport: (data: SupportExportFormats) => void;
}

const FileUploader: React.FC<Props> = ({ onImport }) => {
  const handleFileChange = useCallback(async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    try {
      const response = await fetch('/api/import', {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        const data = await response.json();
        onImport({
          format: file.name.split('.').pop(),
          data: data,
        });
      } else {
        console.error('Failed to import file:', await response.text());
      }
    } catch (error) {
      console.error('Error importing file:', error);
    }
  }, [onImport]);

  return (
    <div>
      <input id="import-file" type="file" accept=".txt,.csv" onChange={handleFileChange} />
      <p>Select a .txt or .csv file to import.</p>
    </div>
  );
};

export default FileUploader;

-------------------
from flask import Flask, request, jsonify
import os
from werkzeug.utils import secure_filename

app = Flask(__name__)

# 配置上传文件夹
UPLOAD_FOLDER = 'uploads/'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# 检查文件夹是否存在，不存在则创建
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

@app.route('/api/import', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400
    if file:
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)
        return jsonify({'message': f'File {filename} imported successfully.', 'path': filepath}), 200

if __name__ == '__main__':
    app.run(debug=True, port=3001)
